-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.appointments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  created_by uuid NOT NULL,
  client_id uuid,
  service_id uuid NOT NULL,
  title text,
  start_date_time timestamp with time zone NOT NULL,
  duration_min integer NOT NULL,
  is_recurring boolean NOT NULL DEFAULT false,
  rrule jsonb,
  timezone text DEFAULT 'America/Argentina/Buenos_Aires'::text,
  notes text,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'done'::text, 'cancelled'::text])),
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  payment_method text CHECK (payment_method = ANY (ARRAY['cash'::text, 'card'::text, 'transfer'::text])),
  final_price integer,
  list_price integer,
  discount integer,
  payment_status text DEFAULT 'pending'::text CHECK (payment_status = ANY (ARRAY['pending'::text, 'paid'::text])),
  payment_notes text,
  actual_duration_min integer,
  started_at timestamp with time zone,
  completed_at timestamp with time zone,
  assigned_to uuid,
  CONSTRAINT appointments_pkey PRIMARY KEY (id),
  CONSTRAINT appointments_service_id_fkey FOREIGN KEY (service_id) REFERENCES public.services(id),
  CONSTRAINT appointments_client_id_fkey FOREIGN KEY (client_id) REFERENCES public.clients(id),
  CONSTRAINT appointments_assigned_to_fkey FOREIGN KEY (assigned_to) REFERENCES public.user_profiles(id),
  CONSTRAINT appointments_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id),
  CONSTRAINT appointments_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.businesses(id)
);
CREATE TABLE public.businesses (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  CONSTRAINT businesses_pkey PRIMARY KEY (id)
);
CREATE TABLE public.client_history (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  client_id uuid NOT NULL,
  event_type text NOT NULL CHECK (event_type = ANY (ARRAY['visit_completed'::text, 'appointment_cancelled'::text, 'reminder_sent'::text, 'client_created'::text])),
  appointment_id uuid,
  timestamp timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  notes text,
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  CONSTRAINT client_history_pkey PRIMARY KEY (id),
  CONSTRAINT client_history_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.businesses(id),
  CONSTRAINT client_history_appointment_id_fkey FOREIGN KEY (appointment_id) REFERENCES public.appointments(id),
  CONSTRAINT client_history_client_id_fkey FOREIGN KEY (client_id) REFERENCES public.clients(id)
);
CREATE TABLE public.clients (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  name text NOT NULL,
  phone text,
  last_visit timestamp with time zone,
  total_visits integer NOT NULL DEFAULT 0,
  total_cancellations integer NOT NULL DEFAULT 0,
  contact_method text CHECK (contact_method = ANY (ARRAY['whatsapp'::text, 'instagram'::text, 'phone'::text])),
  contact_handle text,
  notes text,
  reminder_sent timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  CONSTRAINT clients_pkey PRIMARY KEY (id),
  CONSTRAINT clients_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.businesses(id)
);
CREATE TABLE public.exceptions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  appointment_id uuid NOT NULL,
  original_date_time timestamp with time zone NOT NULL,
  type text NOT NULL CHECK (type = ANY (ARRAY['skip'::text, 'move'::text])),
  new_start_date_time timestamp with time zone,
  new_duration_min integer,
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  CONSTRAINT exceptions_pkey PRIMARY KEY (id),
  CONSTRAINT exceptions_appointment_id_fkey FOREIGN KEY (appointment_id) REFERENCES public.appointments(id),
  CONSTRAINT exceptions_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.businesses(id)
);
CREATE TABLE public.services (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  created_by uuid NOT NULL,
  name text NOT NULL,
  price integer NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  CONSTRAINT services_pkey PRIMARY KEY (id),
  CONSTRAINT services_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.businesses(id),
  CONSTRAINT services_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.staff_schedules (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  user_id uuid NOT NULL,
  day_of_week integer NOT NULL CHECK (day_of_week >= 0 AND day_of_week <= 6),
  start_time time without time zone NOT NULL,
  end_time time without time zone NOT NULL,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT staff_schedules_pkey PRIMARY KEY (id),
  CONSTRAINT staff_schedules_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.businesses(id),
  CONSTRAINT staff_schedules_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.user_profiles(id)
);
CREATE TABLE public.user_profiles (
  id uuid NOT NULL,
  business_id uuid NOT NULL,
  role text NOT NULL DEFAULT 'staff'::text CHECK (role = ANY (ARRAY['admin'::text, 'staff'::text])),
  name text NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  CONSTRAINT user_profiles_pkey PRIMARY KEY (id),
  CONSTRAINT user_profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id),
  CONSTRAINT user_profiles_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.businesses(id)
);
CREATE TABLE public.walk_ins (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  business_id uuid NOT NULL,
  date date NOT NULL,
  client_id uuid,
  service_id uuid,
  service_name text,
  payment_method text NOT NULL CHECK (payment_method = ANY (ARRAY['cash'::text, 'card'::text, 'transfer'::text])),
  final_price integer NOT NULL,
  list_price integer NOT NULL,
  discount integer DEFAULT 0,
  timestamp timestamp with time zone NOT NULL DEFAULT now(),
  notes text,
  duration integer DEFAULT 30,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  started_at timestamp with time zone,
  completed_at timestamp with time zone,
  served_by uuid,
  CONSTRAINT walk_ins_pkey PRIMARY KEY (id),
  CONSTRAINT walk_ins_client_id_fkey FOREIGN KEY (client_id) REFERENCES public.clients(id),
  CONSTRAINT walk_ins_service_id_fkey FOREIGN KEY (service_id) REFERENCES public.services(id),
  CONSTRAINT walk_ins_served_by_fkey FOREIGN KEY (served_by) REFERENCES public.user_profiles(id),
  CONSTRAINT walk_ins_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.businesses(id)
);